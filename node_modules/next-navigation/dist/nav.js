'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {Routes} routes @see https://github.com/fridays/next-routes
 */
exports.default = function (routes) {
  var Link = routes.Link;

  /**
   * NavItem自定义菜单组件
   * 
   * @param {Object} props 接收的属性
   * @param {Object} props.url 来自nextjs框架的url对象
   * @param {Object} props.liProps li的属性
   * @param {Object} props.linkProps Link（来自react-routes）的属性
   * @param {Object} props.activeStyle 激活状态的样式
   * @param {string} props.activeClassName 激活时追加的类
   * @param {boolean} props.nolink 不使用Link的设置为true
   * @param {function=isActive} props.checkIsActive 验证是否为激活为激活的回调，{@link isActive}
   * @param {ReactDom} props.children 子内容
   */

  var NavItem = function NavItem(props) {
    var _props$url = props.url,
        url = _props$url === undefined ? {} : _props$url,
        _props$liProps = props.liProps,
        liProps = _props$liProps === undefined ? {} : _props$liProps,
        _props$linkProps = props.linkProps,
        linkProps = _props$linkProps === undefined ? {} : _props$linkProps,
        children = props.children,
        _props$activeStyle = props.activeStyle,
        activeStyle = _props$activeStyle === undefined ? {} : _props$activeStyle,
        _props$activeClassNam = props.activeClassName,
        activeClassName = _props$activeClassNam === undefined ? 'ative' : _props$activeClassNam,
        _props$activeLinkStyl = props.activeLinkStyle,
        activeLinkStyle = _props$activeLinkStyl === undefined ? {} : _props$activeLinkStyl,
        _props$activeLinkClas = props.activeLinkClassName,
        activeLinkClassName = _props$activeLinkClas === undefined ? '' : _props$activeLinkClas,
        nolink = props.nolink,
        _props$checkIsActive = props.checkIsActive,
        checkIsActive = _props$checkIsActive === undefined ? isActive : _props$checkIsActive;


    var tLiProps = (0, _assign2.default)({}, liProps);

    if (!nolink && checkIsActive(url, linkProps)) {
      //li
      tLiProps.style = (0, _extends3.default)({}, liProps.style, activeStyle);
      var _liProps$className = liProps.className,
          className = _liProps$className === undefined ? '' : _liProps$className;

      tLiProps.className = className + ' ' + activeClassName;

      //link
      linkProps.style = (0, _extends3.default)({}, linkProps.style, activeStyle);
      var _linkProps$className = linkProps.className,
          className = _linkProps$className === undefined ? '' : _linkProps$className;

      linkProps.className = className + ' ' + activeClassName;
    }

    var route = linkProps.route,
        href = linkProps.href,
        prefetch = linkProps.prefetch;

    var p = { route: route, href: href, prefetch: prefetch };
    return _react2.default.createElement(
      'li',
      tLiProps,
      nolink ? children : _react2.default.createElement(
        Link,
        p,
        children
      )
    );

    /**
     * 检查此Link是否匹配当前的url
     * 
     * @param {string} {pathname} 接收的是来自nextjs框架的url对象，这里只用到了pathname
     * @param {string} {route} 接收的是来自props的props.linkProps对象，这里只用到了route
     * @returns {boolean}
     */
    function isActive(_ref, _ref2) {
      var pathname = _ref.pathname;
      var route = _ref2.route;

      if (!pathname || !route) {
        console.log([pathname, route, 'pathname and route should not be undefined!!!']);
        return false;
      }
      if (!routes.findByName(route)) {
        return pathname.startsWith('/' + route);
      }

      return routes.findByName(route).page === pathname;
    }
  };

  /**
   * 自定义导航组件
   * @param {Object} props 
   * @param {Object} props.ulProps ul的属性
   * @param {Object} props.url 来自nextjs框架的url对象
   * @param {Object} props.links 包含的链接（NavItem）
   * @param {Object} props.liProps li的属性（向NavItem传递）
   * @param {Object} props.activeStyle 激活状态的样式（向NavItem传递）
   * @param {string} props.activeClassName 激活时追加的类（向NavItem传递）
   * @param {function=isActive} props.checkIsActive 验证是否为激活为激活的回调，{@link isActive}（向NavItem传递）
   */
  var MyNav = function MyNav(props) {
    return _react2.default.createElement(
      'ul',
      props.ulProps,
      props.links.map(function (link, i) {
        var linkProps = (0, _extends3.default)({}, props, link);
        return _react2.default.createElement(NavItem, (0, _extends3.default)({ key: i }, linkProps));
      })
    );
  };

  return MyNav;
};